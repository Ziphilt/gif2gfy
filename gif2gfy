#!/bin/sh

# Make script halt if encountering an error, as opposed to the standard shell
# behavior of ignoring them
set -e

Q="3.5"
TITLE="o.html"
OUT_FILE="o.html"

# Use a POSIX-friendly way of detecting whether a command is installed
is_available() {
  command -v "${1}" > /dev/null 2>&1
}

get_mimetype() {
  FILE="${1}"

  file -b --mime-type "${FILE}"
}

while getopts ":i:o:q:t:" opt; do
  case $opt in
    i)
      IN_FILE="${OPTARG}"
      ;;
    o)
      OUT_FILE="${OPTARG}"
      ;;
    q)
      Q=${OPTARG}
      ;;
    t)
      TITLE="${OPTARG}"
      ;;
    \?)
      echo "Invalid option: -$OPTARG. Aborting" >&2
      exit 1
      ;;
    :)
      echo "Option -$OPTARG requires an argument. Aborting." >&2
      exit 1
      ;;
  esac
done

if is_available "ffmpeg"; then
  BACKEND="ffmpeg"
else
  BACKEND="ffmpeg-2.4.2-64bit-static/ffmpeg"
  #echo "FFmpeg needs to be installed to continue. Aborting."
  #exit 1
fi

if [ -z "${IN_FILE}" ]; then
  echo "No file specified. Aborting."
  exit 1
fi

if [ ! -f "${IN_FILE}" ]; then
  echo "${INPUT} isn't a file. Aborting."
  exit 1
fi

IN_MIMETYPE="$(get_mimetype "${IN_FILE}")"

# Temporary location for FFmpeg output that'll be deleted once the script ends
GFY="$(mktemp --dry-run)" || echo 1
trap 'rm -f "${GFY}"' EXIT

# If file is .webm, then simply extract the encoded video losslessly
if [ "${IN_MIMETYPE}" = "video/webm" ]; then
  PARAMETERS="-f webm -vcodec copy -an"
  "${BACKEND}" -i "${IN_FILE}" ${PARAMETERS} "${GFY}"

elif [ "${IN_MIMETYPE}" = "image/gif" ]; then
  PARAMETERS="-f webm -minrate ${Q}M -maxrate ${Q}M -b:v ${Q}M"
  ${BACKEND} -i "${IN_FILE}" ${PARAMETERS} "${GFY}"
else
  echo "Not a supported filetype. Aborting."
  exit 1
fi

FFPROBE="ffmpeg-2.4.2-64bit-static/ffprobe"
PARAMETERS="-loglevel quiet -show_entries stream=width,height -print_format csv"
VIDEO_DATA="$("${FFPROBE}" "${GFY}" ${PARAMETERS})"

OUT_MIMETYPE="$(get_mimetype "${GFY}")"
WIDTH="$(echo "${VIDEO_DATA}" | cut -d "," -f2)"
HEIGHT="$(echo "${VIDEO_DATA}"|  cut -d "," -f3)"
DATA="$(base64 -w 0 "${GFY}")"

cat << HTML > "${OUT_FILE}"
<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <title>${TITLE} (${WIDTH}x${HEIGHT}px)</title>
    <style type="text/css">
      html, body {
        width: 100%;
        height: 100%;
      }
      html {
        display: table;
      }
      body {
        display: table-cell;
        vertical-align: middle;
        text-align: center;
        background-color: black;
      }
     </style>
  </head>
  <body>
   <div id="body">
    <video width="${WIDTH}" height="${HEIGHT}" autoplay="autoplay" loop="">
      <source type="${OUT_MIMETYPE}" src="data:${OUT_MIMETYPE};base64,${DATA}">
    </video>
  </div>
  </body>
</html>
HTML
